openapi: 3.1.0
info:
  title: Fowergram API
  description: |
    Fowergram Backend API - A social media platform backend
    
    ## Authentication
    This API uses JWT Bearer tokens for authentication. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your_jwt_token>
    ```
    
    ## Stoplight Integration
    This documentation is automatically generated and kept in sync with the codebase.
  version: 1.0.0
  contact:
    name: Fowergram Team
    email: support@fowergram.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.fowergram.com
    description: Production server

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check if the API is running and healthy
      operationId: healthCheck
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0

  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Create a new user account
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupRequest'
            examples:
              example1:
                summary: Valid signup request
                value:
                  email: user@example.com
                  password: securePassword123
                  username: johndoe
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupResponse'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/signin:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return access token
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninRequest'
            examples:
              example1:
                summary: Valid signin request
                value:
                  email: user@example.com
                  password: securePassword123
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SigninResponse'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/signout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Sign out the current user
      operationId: signout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully signed out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Signed out successfully

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get the currently authenticated user's information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /graphql:
    post:
      tags:
        - GraphQL
      summary: GraphQL endpoint
      description: Execute GraphQL queries and mutations
      operationId: graphql
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: GraphQL query string
                variables:
                  type: object
                  description: Variables for the GraphQL query
                operationName:
                  type: string
                  description: Name of the operation (for multiple operations)
      responses:
        '200':
          description: GraphQL response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                  errors:
                    type: array
                    items:
                      type: object

  /playground:
    get:
      tags:
        - Development
      summary: GraphQL Playground
      description: Interactive GraphQL playground (development only)
      operationId: playground
      responses:
        '200':
          description: GraphQL playground interface
          content:
            text/html:
              schema:
                type: string

  /metrics:
    get:
      tags:
        - Monitoring
      summary: Prometheus metrics
      description: Prometheus metrics endpoint for monitoring
      operationId: metrics
      responses:
        '200':
          description: Prometheus metrics in text format
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SignupRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        password:
          type: string
          minLength: 8
          description: User's password
          example: securePassword123
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: '^[a-zA-Z0-9_]+$'
          description: Unique username
          example: johndoe

    SignupResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        message:
          type: string
          example: User created successfully

    SigninRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          example: securePassword123

    SigninResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        accessToken:
          type: string
          description: JWT access token
        message:
          type: string
          example: Signed in successfully

    UserResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User's unique identifier
          example: 123e4567-e89b-12d3-a456-426614174000
        email:
          type: string
          format: email
          description: User's email address
          example: user@example.com
        username:
          type: string
          description: User's username
          example: johndoe

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid request body
        details:
          type: object
          description: Additional error details (optional) 